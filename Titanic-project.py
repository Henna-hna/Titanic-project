# -*- coding: utf-8 -*-
"""Python practice.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yGKmXnCOWTzoBy3r3nNL1D9TXvu24CQr
"""



"""TITANIC-PROJECT

Check out the Kaggle Titanic Challenge at the following link:

https://www.kaggle.com/c/titanic-gettingStarted

Note: You'll need to make an account to access the data.

Download the train.csv file and save it to the same location as your iPython Notebooks.
"""

# Commented out IPython magic to ensure Python compatibility.
#for data
import pandas as pd
from pandas import Series,DataFrame
import numpy as np

#for visualization
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_style('whitegrid')
# %matplotlib inline

from __future__ import division

# Use to grab data from the web(HTTP capabilities)
import requests

# We'll also use StringIO to work with the csv file, the DataFrame will require a .read() method
from io import StringIO

# Set up the Titanic csv file as a DataFrame
titanic_df = pd.read_csv('/content/train.csv')

# Let's see a preview of the data
titanic_df.head()

# We could also get overall info for the dataset
titanic_df.info()

"""All good data analysis projects begin with trying to answer questions. Now that we know what column category data we have let's think of some questions or insights we would like to obtain from the data. So here's a list of questions we'll try to answer using our new data analysis skills!

First some basic questions:

1.) Who were the passengers on the Titanic? (Ages,Gender,Class,..etc)
2.) What deck were the passengers on and how does that relate to their class?
3.) Where did the passengers come from?
4.) Who was alone and who was with family?
Then we'll dig deeper, with a broader question:

5.) What factors helped someone survive the sinking?
So let's start with the first question: Who were the passengers on the titanic?
"""

# Let's first check gender
sns.catplot(data=titanic_df, x='Sex', kind='count')

# Now let's seperate the genders by classes, remember we can use the 'hue' arguement here!
sns.catplot(data=titanic_df, x='Pclass', hue='Sex', kind='count')

"""Wow, quite a few more males in the 3rd class than females, an interesting find. However, it might be useful to know the split between males,females,and children. How can we go about this?"""

# We'll treat anyone as under 16 as a child, and then use the apply technique with a function to create a new column


# First let's make a function to sort through the sex

def male_female_child(passenger):
  #take the age and sex
  age,sex = passenger
  #compare the age, otherwise leave the sex
  if age < 16:
    return 'Child'
  else:
    return sex


# We'll define a new column called 'person', remember to specify axis=1 for columns and not index

titanic_df['Person'] = titanic_df[['Age','Sex']].apply(male_female_child,axis=1)

# Let's see if this worked, check out the first ten rows
titanic_df[0:10]

# Let's try the factorplot again!
sns.catplot(data=titanic_df, x='Pclass', hue='Person', kind='count')

"""Interesting, quite a bit of children in 3rd class and not so many in 1st! How about we create a distribution of the ages to get a more precise picture of the who the passengers were."""

# Quick way to create a histogram using pandas
titanic_df['Age'].hist(bins=70)

# We could also get a quick overall comparison of male,female,child
titanic_df['Person'].value_counts()

# Another way to visualize the data is to use FacetGrid to plot multiple kedplots on one plot

# Set the figure equal to a facetgrid with the pandas dataframe as its data source, set the hue, and change the aspect ratio.
fig = sns.FacetGrid(titanic_df, hue='Sex', aspect=4)

# Next use map to plot all the possible kdeplots for the 'Age' column by the hue choice
fig.map(sns.kdeplot,'Age', shade=True)

# Set the x max limit by the oldest passenger
oldest = titanic_df['Age'].max()

#Since we know no one can be negative years old set the x lower limit at 0
fig.set(xlim=(0, oldest))

#Finally add a legend
fig.add_legend()

# We could have done the same thing for the 'person' column to include children:

fig = sns.FacetGrid(titanic_df, hue='Person', aspect=4 )
fig.map(sns.kdeplot,'Age', shade=True)
oldest = titanic_df['Age'].max()
fig.set(xlim=(0, oldest))
fig.add_legend()

# Let's do the same for class by changing the hue argument:
fig = sns.FacetGrid(titanic_df, hue='Pclass', aspect=4)
fig.map(sns.kdeplot,'Age', shade=True)
oldest = titanic_df['Age'].max()
fig.set(xlim=(0, oldest))
fig.add_legend()

# Let's get a quick look at our dataset again
titanic_df.head()

"""So we can see that the Cabin column has information on the deck, but it has several NaN values, so we'll have to drop them."""

